{{!< layout}}
<div class="aui-group">
    <div class="aui-item">
        <div id="images" style="display: flex; overflow-x: scroll;">
            {{#each images}}
                <div style="position: relative; margin: 5px;">
                    <img src="{{this.url}}" alt="{{this.name}}" style="width: 150px; height: 150px;">
                    <button onclick="viewDiagram('{{this.url}}')" style="position: absolute; top: 5px; left: 5px;">View</button>
                    <form action="/delete-diagram" method="POST" style="position: absolute; top: 5px; right: 5px;">
                        <input type="hidden" name="issueKey" value="{{../issueKey}}">
                        <input type="hidden" name="diagramId" value="{{this.id}}">
                        <button type="submit">X</button>
                    </form>
                </div>
            {{/each}}
        </div>


        {{!-- <button id="button-add" onclick="openChartSelect()" class="aui-button aui-button-primary">
            <span class="picker-inline-button__text">Add diagram</span>
        </button> --}}
        <div>
            <p>Visualize your task with diagrams</p>
        </div>
        <button onclick="openChartSelect()">Connect</button>
        <button onclick="viewDiagram(true)">View</button>
</div>
</div>
<script>
    import { useState } from "https://esm.sh/preact/hooks";
    /*function openChartSelect() {
        window.AP.dialog.create({
            key: 'editor',
            width: '800px',
            height: '600px',
        }).on('close', function() {
            location.reload();
        });
    }*/

    const MC_BASE_URL = "{{MC_BASE_URL}}";
    const JWTToken = "{{token}}";
    const loginState = "{{loginState}}";
    const loginURL = "{{{loginURL}}}";
    const mcAccessToken = "{{mcAccessToken}}";
    //const loggedUser = "{{{user}}}";

    console.log("loginURL", loginURL);

    function openChartSelect() {
        const width = 500;
        const height = 650;
        const left = (screen.width / 2) - (width / 2);
        const top = (screen.height / 2) - (height / 2);
        let options = 'width=' + width;
        options += ',height=' + height;
        options += ',top=' + top;
        options += ',left=' + left;

        console.log("loginURL: ", loginURL);

        const windowObjectReference = window.open(loginURL, 'loginWindow', options);
        windowObjectReference.focus();

        let timeout;
        const [accessToken, setAccessToken] = useState(mcAccessToken);
        const [user, setUser] = useState(loggedUser);

        const onLogin = (token, user) => {
            setAccessToken(token);
            setUser(user);
        };

        const callback = async () => {
            console.log("login callback")
            const res = await fetch(`/check_token?state=${loginState}`, {
                headers: {
                    Authorization: `JWT ${JWTToken}`,
                },
            });
            if (res.ok) {
                const body = await res.json();
                console.log("login token");
                console.log(body);
                onLogin(body.token, body.user);
            } else {
                timeout = setTimeout(callback, 500);
            }
        }
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
        timeout = setTimeout(callback, 500);

        return false;
    }

    function viewDiagram(url) {
        //window.open(url, '_blank');

        AP.dialog.create({
            key: 'dialog-module-select',
            width: '700px',
            height: '400px',
            chrome: true,
            customData: {
                baseUrl: MC_BASE_URL          
            },
            buttons: [
                /*{
                  text: 'Close',
                  identifier: 'mc-close-button'
                }*/
            ]
        }).on("close", closeCallback);
    }

    function closeCallback() {

    }

    function deleteDiagram(issueKey, diagramId) {
        fetch('/delete-chart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ issueKey, diagramId })
        }).then(() => {
            location.reload();
        });
    }

    /// Event and dialog emmiting
    AP.events.on('loginEvent', function(){
        console.log("Log in");
    });

</script>
<script type="module">
    
    console.log(images);
</script>
